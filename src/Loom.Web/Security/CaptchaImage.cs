#region Using Directives

using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using Loom.Security;

#endregion

namespace Loom.Web.Security
{
    /// <summary>
    ///     A class for dynamically generating a CAPTCHA compliant <see cref="Image" />.
    /// </summary>
    public class CaptchaImage
    {
        private static readonly Random Random = new Random(new Random().Next(int.MaxValue));

        /// <summary>
        ///     Gets the text generated by the class or passed to the constructor.
        /// </summary>
        /// <value>
        ///     A String representing the text in the anti-spam image. Value
        ///     is <null /> if called before image generation.
        /// </value>
        public string GeneratedText { get; private set; }

        /// <summary>
        ///     Generates a CAPTCHA <see cref="System.Drawing.Image" />.
        /// </summary>
        /// <param name="backgroundImage">The background image.</param>
        /// <param name="text">The text to display in the CAPTCHA image.</param>
        /// <returns>
        ///     An <see cref="Image" />.
        /// </returns>
        /// <exception cref="System.NullReferenceException">
        ///     The <paramref name="backgroundImage" /> is a
        ///     null reference.
        /// </exception>
        public virtual Image GenerateImage(Image backgroundImage, string text = null)
        {
            Argument.Assert.IsNotNull(backgroundImage, "backgroundImage");
            return PrivateGenerateImage(backgroundImage, text);
        }

        /// <summary>
        ///     Generates a CAPTCHA <see cref="System.Drawing.Image" />.
        /// </summary>
        /// <param name="backgroundImagePath">The background image path.</param>
        /// <param name="text">The text.</param>
        /// <returns>
        ///     An <see cref="Image" />.
        /// </returns>
        /// <exception cref="System.NullReferenceException">
        ///     The <paramref name="backgroundImagePath" /> is a
        ///     null reference.
        /// </exception>
        /// <exception cref="FileNotFoundException">
        ///     The file specified by the
        ///     <paramref name="backgroundImagePath" /> was not found.
        /// </exception>
        public virtual Image GenerateImage(string backgroundImagePath, string text = null)
        {
            Argument.Assert.IsNotNull(backgroundImagePath, "backgroundImagePath");
            Argument.Assert.FileExists(backgroundImagePath);
            return GenerateImage(Image.FromFile(backgroundImagePath), text);
        }

        private Image PrivateGenerateImage(Image workingImage, string text)
        {
            if (text == null)
                text = Password.CreateCaptcha(Random.Next(7, 10));

            const int fontSize = 30;
            const int bgWidth = 290;
            const int bgHeight = 80;
            float x = (bgWidth - text.Length * (fontSize + 0.5F)) / 2;
            const float y = (bgHeight - fontSize * 1.7F) / 2;

            Graphics graphicObj = Graphics.FromImage(workingImage);

            // Creata the hatch brushes
            HatchBrush brushObj = new HatchBrush(HatchStyle.Percent80, Color.Black, Color.Transparent);
            HatchBrush brushObj2 = new HatchBrush(HatchStyle.Percent90, Color.White, Color.Transparent);

            //Get the fonts to use
            string[] crypticFonts = GetCrypticFonts();

            // Loop to write the characters on image with different fonts
            for (int a = 0; a < GeneratedText.Length; a++)
            {
                Font fontObj = new Font(crypticFonts[Random.Next(0, crypticFonts.Length)], fontSize, FontStyle.Regular);
                int offset = Random.Next(-20, 10);
                graphicObj.DrawString(GeneratedText.Substring(a, 1), fontObj, PickRandomBrush(brushObj, brushObj2), x + a * fontSize,
                    y + offset);
                graphicObj.Flush();
                fontObj.Dispose();
            }

            graphicObj.Flush();
            brushObj.Dispose();
            graphicObj.Dispose();

            GeneratedText = text;

            return workingImage;
        }

        private static Brush PickRandomBrush(params Brush[] brushes)
        {
            int color = Random.Next(brushes.Length);
            return brushes[color];
        }

        /// <summary>
        ///     Creating an array for most readable yet cryptic fonts for OCR's.
        /// </summary>
        /// <returns>An array of Strings holding the names of the fonts to use.</returns>
        /// <remarks>
        ///     <para>
        ///         The <b>fonts</b> to use are entirely up to developer's discretion.
        ///         Override to use your own.
        ///     </para>
        ///     <para>This is the <b>recommended</b> method.</para>
        /// </remarks>
        protected virtual string[] GetCrypticFonts()
        {
            return PrivateGetCrypticFonts();
        }

        private static string[] PrivateGetCrypticFonts()
        {
            string[] crypticFonts =
            {
                //"Arial",
                "Verdana",
                "Comic Sans MS",
                //"Impact",
                //"Haettenschweiler",
                "Lucida Sans Unicode",
                "Garamond"
                //"Courier New",
                //"Book Antiqua",
                //"Arial Narrow"
            };
            return crypticFonts;
        }
    }
}