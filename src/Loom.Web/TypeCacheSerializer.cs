#region Using Directives

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml;

#endregion

namespace Loom.Web
{
    // ReSharper disable PossibleNullReferenceException
    internal sealed class TypeCacheSerializer
    {
        private static readonly Guid CportalVersionId = typeof(TypeCacheSerializer).Module.ModuleVersionId;

        internal DateTime? CurrentDateOverride { get; set; }

        private DateTime CurrentDate => CurrentDateOverride ?? DateTime.Now;

        public List<Type> DeserializeTypes(TextReader input)
        {
            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.Load(input);
            XmlElement documentElement = xmlDocument.DocumentElement;

            if (new Guid(documentElement.Attributes["mvcVersionId"].Value) != CportalVersionId)
                return null;

            List<Type> list = new List<Type>();
            foreach (XmlNode xmlNode1 in documentElement.ChildNodes)
            {
                Assembly assembly = Assembly.Load(xmlNode1.Attributes["name"].Value);
                foreach (XmlNode xmlNode2 in xmlNode1.ChildNodes)
                {
                    Guid guid = new Guid(xmlNode2.Attributes["versionId"].Value);
                    foreach (XmlNode xmlNode3 in xmlNode2.ChildNodes)
                    {
                        string innerText = xmlNode3.InnerText;
                        Type type = assembly.GetType(innerText);

                        if (type == null || type.Module.ModuleVersionId != guid)
                            return null;

                        list.Add(type);
                    }
                }
            }
            return list;
        }

        public void SerializeTypes(IEnumerable<Type> types, TextWriter output)
        {
            IEnumerable<IGrouping<Assembly, IGrouping<Module, Type>>> enumerable = types.GroupBy(type => type.Module).GroupBy(groupedByModule => groupedByModule.Key.Assembly);

            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.AppendChild(xmlDocument.CreateComment("This file is automatically generated. Please do not modify the contents of this file."));

            XmlElement element1 = xmlDocument.CreateElement("typeCache");
            xmlDocument.AppendChild(element1);

            element1.SetAttribute("lastModified", CurrentDate.ToString());
            element1.SetAttribute("mvcVersionId", CportalVersionId.ToString());

            foreach (IGrouping<Assembly, IGrouping<Module, Type>> grouping1 in enumerable)
            {
                XmlElement element2 = xmlDocument.CreateElement("assembly");
                element1.AppendChild(element2);
                element2.SetAttribute("name", grouping1.Key.FullName);

                foreach (IGrouping<Module, Type> grouping2 in grouping1)
                {
                    XmlElement element3 = xmlDocument.CreateElement("module");
                    element2.AppendChild(element3);
                    element3.SetAttribute("versionId", grouping2.Key.ModuleVersionId.ToString());

                    foreach (Type type in grouping2)
                    {
                        XmlElement element4 = xmlDocument.CreateElement("type");
                        element3.AppendChild(element4);
                        element4.AppendChild(xmlDocument.CreateTextNode(type.FullName));
                    }
                }
            }
            xmlDocument.Save(output);
        }
    }
}