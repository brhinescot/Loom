#region Using Directives

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.UI;
using System.Web.UI.WebControls;

#endregion

namespace Loom.Web.UI
{
    /// <summary>
    ///     Represents a class used to display any message in a <see cref="ValidationSummary" />.
    /// </summary>
    /// <remarks>
    ///     Use the static <see cref="ShowError(Page,string)" /> method to show the validation message.
    /// </remarks>
    public sealed class ErrorSummary : Component, IValidator
    {
        private readonly string errorMessage;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ErrorSummary" /> class.
        /// </summary>
        /// <param name="errorMessage"></param>
        private ErrorSummary(string errorMessage)
        {
            this.errorMessage = Compare.IsNullOrEmpty(errorMessage) ? "An unknown error occurred." : errorMessage;
        }

        #region IValidator Members

        /// <summary>
        ///     Gets or sets the error message text to display.
        /// </summary>
        /// <returns>
        ///     The error message to generate.
        /// </returns>
        string IValidator.ErrorMessage
        {
            get => errorMessage;
            set => throw new NotSupportedException();
        }

        /// <summary>
        ///     Gets or sets a value indicating whether the value of the <see cref="ErrorMessage" />
        ///     property should be displayed.
        /// </summary>
        /// <returns>
        ///     true if the content is valid; otherwise, false. The default is false.
        /// </returns>
        bool IValidator.IsValid
        {
            get => false;
            set => throw new NotSupportedException();
        }

        /// <summary>
        ///     This method has no functionality in this implementation.
        /// </summary>
        void IValidator.Validate() { }

        #endregion

        /// <summary>
        ///     Registers an <see cref="IValidator" /> object with a <see cref="ValidationSummary" /> on
        ///     the specified <paramref name="page" />.
        /// </summary>
        /// <param name="page">The page on which the <see cref="ValidationSummary" /> is located.</param>
        public static void ShowError(Page page)
        {
            page.Validators.Add(new ErrorSummary(null));
        }

        /// <summary>
        ///     Registers an <see cref="IValidator" /> object with a <see cref="ValidationSummary" /> on
        ///     the specified <paramref name="page" />.
        /// </summary>
        /// <remarks>
        ///     <para>
        ///         If a <see cref="ValidationSummary" /> control exists on the specified <paramref name="page" />,
        ///         the <paramref name="message" /> will be displayed.
        ///     </para>
        ///     <para>
        ///         <b>Important:</b> This method will only display the <see cref="Exception" /> details when
        ///         compiled in debug mode.
        ///     </para>
        /// </remarks>
        /// <param name="message">The message to display in the <see cref="ValidationSummary" />.</param>
        /// <param name="page">The page on which the <see cref="ValidationSummary" /> is located.</param>
        /// <param name="ex">The exception to display in the <see cref="ValidationSummary" />.</param>
        public static void ShowError(Page page, string message, Exception ex)
        {
            ShowError(page, message);
            ShowError(page, ex);
        }

        /// <summary>
        ///     Registers an <see cref="IValidator" /> object with a <see cref="ValidationSummary" /> on
        ///     the specified <paramref name="page" />.
        /// </summary>
        /// <remarks>
        ///     <para>
        ///         If a <see cref="ValidationSummary" /> control exists on the specified <paramref name="page" />,
        ///         the <paramref name="message" /> will be displayed.
        ///     </para>
        /// </remarks>
        /// <param name="message">The message to display in the <see cref="ValidationSummary" />.</param>
        /// <param name="page">The page on which the <see cref="ValidationSummary" /> is located.</param>
        public static void ShowError(Page page, string message)
        {
            page.Validators.Add(new ErrorSummary(message));
        }

        /// <summary>
        ///     Registers an <see cref="IValidator" /> object with a <see cref="ValidationSummary" /> on
        ///     the specified <paramref name="page" />.
        /// </summary>
        /// <remarks>
        ///     <para>
        ///         If a <see cref="ValidationSummary" /> control exists on the specified <paramref name="page" />,
        ///         a message will be generated by the <see cref="ExceptionFormatter" /> class and displayed.
        ///     </para>
        ///     <para>
        ///         <b>Important:</b> This method is only available in debug mode. Calls to this method in release mode
        ///         will be optimized away.
        ///     </para>
        /// </remarks>
        /// <param name="ex">The exception to display in the <see cref="ValidationSummary" />.</param>
        /// <param name="page">The page on which the <see cref="ValidationSummary" /> is located.</param>
        [Conditional("DEBUG")]
        public static void ShowError(Page page, Exception ex)
        {
            Exception original;
            for (original = ex; original.InnerException != null; original = original.InnerException) { }

            ExceptionFormatter formatter = new ExceptionFormatter();
            formatter.Summary = string.Format("An exception of type {0} has occurred.<br />{1}", original.GetType().FullName, original.Message);
            page.Validators.Add(new ErrorSummary(formatter.Generate(ex, "<br />")));
        }
    }
}