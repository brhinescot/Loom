The API-function you need for the ghost icons   tschenz  12:03 28 Sep '05  
 
  you can use the API function CreateIconIndirect to create any cursor from a bitmap. There is not 
  size limit so you can draw the item into a bitmap and convert it into a cursor. The following 
  class can be used for that. An instance of this class must exists as long as the cursor is displayed.


using System;
using System.Windows.Forms;
using System.Drawing;
using System.Runtime.InteropServices;

namespace aux
{
/// 
/// Creates a Cursor from any bitmap. You can use the alpha-channel
/// for transparency effects.
/// 
public class BitmapCursor : IDisposable
{
#region Win-API imports

/// 
/// API-Structure ICONINFO
/// 
/// 
[StructLayout(LayoutKind.Sequential)]
public struct ICONINFO
{
public bool fIcon;
public uint xHotspot;
public uint yHotspot;
public IntPtr hbmMask;
public IntPtr hbmColor;
}

/// 
/// API function CreateIconIndirect
/// 
[System.Runtime.InteropServices.DllImport("USER32.DLL")]
public static extern IntPtr CreateIconIndirect( ref ICONINFO iconinfo );
/// 
/// API function DestryIcon
/// 
[System.Runtime.InteropServices.DllImport("USER32.DLL")]
public static extern bool DestroyIcon( IntPtr hIcon );

#endregion

#region private

private ICONINFO iconInfo;
private Cursor cursor = null;
private IntPtr handle = IntPtr.Zero;

private void Create()
{
handle = CreateIconIndirect( ref iconInfo );
cursor = new Cursor( handle );
}


#endregion

#region constructors and destructor

public BitmapCursor( System.Drawing.Bitmap bmp, int HotSpotX, int HotSpotY )
{
iconInfo = new ICONINFO();
iconInfo.fIcon = false;
iconInfo.xHotspot = 0;
iconInfo.yHotspot = 0;
iconInfo.hbmMask = bmp.GetHbitmap();
iconInfo.hbmColor = bmp.GetHbitmap();
Create();
}
/// 
/// Creates a cursor from a bitmap and combines it with another cursor.
/// 
public BitmapCursor( System.Drawing.Bitmap bmp, Cursor Cursor )
{
iconInfo = new ICONINFO();
iconInfo.fIcon = false;
iconInfo.xHotspot = 0;
iconInfo.yHotspot = 0;
using( System.Drawing.Bitmap bmpdup = bmp.Clone() as System.Drawing.Bitmap )
{
using( Graphics g = Graphics.FromImage( bmpdup ) )
{
Cursor.Draw( g, new Rectangle( new Point( 0, 0 ), Cursor.Size ) );
}
iconInfo.hbmMask = bmpdup.GetHbitmap();
iconInfo.hbmColor = bmpdup.GetHbitmap();
Create();
}
}


/// 
/// destructor
/// 
~BitmapCursor()
{
Dispose( false );
}

#endregion

#region virtual methods

/// 
/// clean up resources
/// 
protected virtual void Dispose( bool disposing )
{
try
{
if( handle != IntPtr.Zero )
DestroyIcon( handle );
}
catch
{
}
}


#endregion

#region public properties

/// 
/// The Cursor-Object you can use
/// 
public Cursor Cursor
{
get
{
return cursor;
}
}


#endregion

#region IDisposable Member

/// 
/// free the used handles
/// 
public void Dispose()
{
GC.SuppressFinalize( this );
Dispose( true );
}

#endregion
}
}


Example for creating a drag cursor from a TreeNode that look like Windows-Explorer:

private BitmapCursor dragBitmapCursor = null;

protected virtual Cursor CreateDragCursor( TreeNode node )
{
int width = node.Bounds.Width;
int height = node.Bounds.Height;
Rectangle r = new Rectangle( 0, 0, width, height );
using( Graphics g0 = CreateGraphics() )
using( Bitmap bmp = new Bitmap( width, height * 4, g0 ) )
using( Graphics g = Graphics.FromImage( bmp ) )
{
g.Clear( Color.FromArgb( 0, 0, 0, 0 ) );

Color cb1 = Color.FromArgb( 255, 0, 89, 181 );
Color cb2 = Color.FromArgb( 0, 0, 89, 181 );
using( Brush b = new System.Drawing.Drawing2D.LinearGradientBrush( r, cb1, cb2, 0, false ) )
g.FillRectangle( b, 0, 0, width, height );

Color ct1 = Color.FromArgb( 255, 255, 255, 255 );
Color ct2 = Color.FromArgb( 64, 255, 255, 255 );
using( Brush b = new System.Drawing.Drawing2D.LinearGradientBrush( r, ct1, ct2, 0, false ) )
g.DrawString( node.Text, Font, b, 0, 0 );


DragBitmapCursor = new BitmapCursor( bmp, Cursors.Default );
return DragBitmapCursor.Cursor;
}
}
 
 
 
 
