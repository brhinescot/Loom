<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SqlConstraints" xml:space="preserve">
    <value>SELECT
	USAGE.TABLE_SCHEMA AS TableOwner,
	USAGE.TABLE_NAME AS TableName,
	USAGE.COLUMN_NAME AS ColumnName, 	
	CON.CONSTRAINT_TYPE AS ConstraintType	
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE USAGE
JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS CON
ON USAGE.CONSTRAINT_NAME = CON.CONSTRAINT_NAME
ORDER BY USAGE.TABLE_SCHEMA, USAGE.TABLE_NAME</value>
  </data>
  <data name="SqlForeignKeys" xml:space="preserve">
    <value>SELECT 
	COL.TABLE_SCHEMA AS TableOwner,
	COL.TABLE_NAME AS TableName,
	COL.COLUMN_NAME AS ColumnName, 	
	COLUSE.TABLE_SCHEMA AS ForeignTableOwner,
	COLUSE.TABLE_NAME AS ForeignTableName,
	COLUSE.COLUMN_NAME AS ForeignColumnName
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE COL
JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS CON
ON COL.CONSTRAINT_NAME = CON.CONSTRAINT_NAME
JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS REF
ON REF.CONSTRAINT_NAME = CON.CONSTRAINT_NAME
JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE COLUSE
ON COLUSE.CONSTRAINT_NAME = REF.UNIQUE_CONSTRAINT_NAME
ORDER BY COL.TABLE_SCHEMA, COL.TABLE_NAME</value>
  </data>
  <data name="SqlSPParameters" xml:space="preserve">
    <value>SELECT
	ISP.SPECIFIC_SCHEMA AS Owner, 
	ISP.SPECIFIC_NAME AS ProcedureName, 
	REPLACE(ISP.PARAMETER_NAME, '@', '') AS ParameterName,
	ISP.ORDINAL_POSITION AS OrdinalPosition, 
	ISP.PARAMETER_MODE AS ParamType, 
	ISP.IS_RESULT AS IsResult, 
	ISP.DATA_TYPE AS DataType,  
	ISP.CHARACTER_MAXIMUM_LENGTH AS MaxLength
FROM INFORMATION_SCHEMA.PARAMETERS ISP
JOIN INFORMATION_SCHEMA.ROUTINES ISR ON 
	ISP.SPECIFIC_SCHEMA = ISR.SPECIFIC_SCHEMA AND
	ISP.SPECIFIC_NAME = ISR.SPECIFIC_NAME
WHERE ISR.ROUTINE_TYPE = 'PROCEDURE'
ORDER BY ISP.SPECIFIC_SCHEMA, ISP.SPECIFIC_NAME</value>
  </data>
  <data name="SqlTableColumns" xml:space="preserve">
    <value>SELECT 
	COL.TABLE_SCHEMA AS TableOwner,
	COL.TABLE_NAME AS TableName,
	TBL.TABLE_TYPE AS TableType,
	COL.COLUMN_NAME AS ColumnName, 
	COL.IS_NULLABLE AS IsNullable, 
	COL.DATA_TYPE AS DataType, 
	COL.CHARACTER_MAXIMUM_LENGTH AS MaxLength, 
	COLUMNPROPERTY(object_id(COL.TABLE_SCHEMA + '.' + COL.TABLE_NAME), COL.COLUMN_NAME, 'IsComputed') as IsComputed,
	COLUMNPROPERTY(object_id(COL.TABLE_SCHEMA + '.' + COL.TABLE_NAME), COL.COLUMN_NAME, 'IsIdentity') as IsIdentity,
	COL.ORDINAL_POSITION AS Ordinal,
	[Description] = EXPROP.value,
	COL.COLUMN_DEFAULT AS DefaultValue
FROM INFORMATION_SCHEMA.COLUMNS COL
JOIN INFORMATION_SCHEMA.TABLES TBL
	ON COL.TABLE_SCHEMA = TBL.TABLE_SCHEMA 
		AND COL.TABLE_NAME = TBL.TABLE_NAME 
JOIN sys.columns SYSCOL  
	ON SYSCOL.object_id = OBJECT_ID(COL.TABLE_SCHEMA + '.' + COL.TABLE_NAME)
		AND SYSCOL.name = COL.COLUMN_NAME
LEFT OUTER JOIN  
    sys.extended_properties EXPROP  
ON  
    EXPROP.major_id = SYSCOL.object_id 
    AND EXPROP.minor_id = SYSCOL.column_id  
    AND EXPROP.name = 'MS_Description'  
WHERE (EXPROP.class_desc = 'OBJECT_OR_COLUMN' OR EXPROP.class_desc IS NULL)
ORDER BY COL.TABLE_SCHEMA, COL.TABLE_NAME</value>
  </data>
</root>